import org.gradle.api.java.archives.internal.DefaultManifest

// 这种是legacy的configuration，但针对未publish到maven central的，还是要这种方式才行(dependencies部分)
buildscript {
    repositories {
        gradlePluginPortal()
        // Should in hierarchy
        maven {
            name "extra-repo"
            url "$rootProject.projectDir/ex-lib"
        }
    }
    dependencies {
        classpath "org.gradlex:extra-java-module-info:1.4.1"
    }
}

plugins {
    id 'com.lwohvye.java-conventions'
    //主要是定义了这个，定义了SpringBoot的Version相关，并提供了application, bootJar, bootBuildImage这些Task
    alias(libs.plugins.spring.boot) apply false
    // This plugin simplifies the use of Lombok in Gradle
    id "io.freefair.lombok" version "8.2.2" apply false
    // 在parent root执行Task，会同步执行sub project的Task，比如执行了bootJar，那会执行subPro的bootJar(若其中没有该Task会ignore)
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'org.graalvm.buildtools.native' version '0.9.24' apply false
}

ext {
    kotlinEnable = true
    graalvmEnable = false
}

ext.sharedManifest = manifest {
    attributes(
            'Developer': 'lWoHvYe',
            'Created-By': 'Gradle',
            'Built-By': System.properties['user.name'],
            'Build-Jdk-Spec': "${System.properties['java.version']}"
    )
} as DefaultManifest

subprojects {

    apply plugin: "com.lwohvye.java-conventions"
    apply plugin: "org.gradlex.extra-java-module-info"
    apply plugin: "io.freefair.lombok"
    // Setting a custom Lombok version when use plugin io.freefair.lombok
    lombok {
        version = "1.18.29"
    }

    java {
        registerFeature('coreComp') {
            usingSourceSet(sourceSets.main)
        }
    }

    dependencies {
        implementation libs.asm
        coreCompCompileOnly libs.mapstruct.processor
        annotationProcessor libs.mapstruct.processor
        annotationProcessor libs.mapstruct.spring
    }

    tasks.withType(Javadoc).tap {
        configureEach {
            failOnError(false)
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
            options.addBooleanOption('-enable-preview', true)
            options.addStringOption('-release', '20')
            // Add support for custom tag
            options.addStringOption('tag', 'date:a:Init Date:')
            options.addStringOption('tag', 'author:a:Major Contributor:')
        }
    }

    extraJavaModuleInfo {
        failOnMissingModuleInfo.set(false)
        automaticModule("io.github.mouzt:bizlog-sdk", 'bizlog.sdk')
        automaticModule("com.github.whvcse:easy-captcha", 'easy.captcha')
        automaticModule("io.jsonwebtoken:jjwt-api", 'jjwt.api')
        automaticModule("io.jsonwebtoken:jjwt-impl", 'jjwt.impl')
        automaticModule("io.jsonwebtoken:jjwt-jackson", 'jjwt.jackson')
        automaticModule("org.quartz-scheduler:quartz", 'quartz')
        automaticModule("org.redisson:redisson", 'redisson')
        automaticModule("org.springframework.retry:spring-retry", 'spring.retry')
        // runtimeOnly
//        automaticModule("org.apache.commons:commons-math3", 'commons.math3')
//        automaticModule("com.zaxxer:SparseBitSet", 'SparseBitSet')
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'unicorn'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Valentine Unicorn'
                packaging = 'pom'
                // optionally artifactId can be defined here
                description = 'A Spring Boot Project With Jpa JWT Security and so on'
                url = 'https://github.com/WHY-lWoHvYe/valentine-p2p.git'
                properties = [
                        myProp                : "chaste unicorn",
                        "spring-boot.version" : "${springBootVersion}",
                        "project.core.version": "${version}"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'lWoHvYe'
                        name = '王红岩(lWoHvYe)'
                        email = 'lWoHvYe@outlook.com'
                        url = 'https://www.lwohvye.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/WHY-lWoHvYe/valentine-p2p.git'
                    developerConnection = 'scm:git:ssh://github.com/WHY-lWoHvYe/valentine-p2p.git'
                    url = 'https://github.com/WHY-lWoHvYe/valentine-p2p/tree/main'
                    tag = "unicorn-v${version}"
                }
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(System.getenv('OSSRH_USERNAME') ?: providers.gradleProperty("ossrhUsername").orElse(""))
            password.set(System.getenv('OSSRH_PASSWORD') ?: providers.gradleProperty("ossrhPassword").orElse(""))
        }
    }
}
