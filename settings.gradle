/*
 * This file was generated by the Gradle 'init' task.
 */
pluginManagement {
    repositories {
        gradlePluginPortal()
        maven {
            url 'https://repo.spring.io/milestone'
        }
        maven {
            url 'https://repo.spring.io/snapshot'
        }
    }
}

plugins {
    id 'com.gradle.enterprise' version '3.14.1'
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        gradlePluginPortal()
        flatDir {
            dirs "$rootProject.projectDir/ex-lib"
        }
        maven {
            url 'https://repo.spring.io/snapshot'
        }
        maven {
            url 'https://repo.spring.io/milestone'
        }
    }

    versionCatalogs {
        libs {
            // 启用versionCatalogs
            version('asm', '9.5') // 这里单双引号都可以
            version('authorizationServer', '1.1.0')
            version('bizlog', '3.0.6')
            version('captcha', '2.0.0')
            version('commonsBeanutils', '1.9.4')
            version('commonsConfiguration', '2.9.0')
            version('easyCaptcha', '1.6.2')
            version('hutool', '5.8.20')
            version('ip2region', '3.0.4')
            version('jjwt', '0.11.5')
            version('kotlin', "$kotlinVersion")
            version('kotlinxCoroutines', '1.7.2')
            version('log4jdbc', '1.18')
            version('logstash', '7.4')
            version('mapstruct', '1.5.5.Final')
            version('mapstructSpring', '1.0.1')
            version('oshiCore', '6.4.2')
            version('poi', '5.2.3')
            version('quartz', '2.3.2')
            version('redisson', '3.22.0')
            version('springBoot', "$springBootVersion")
            version('springdoc', '2.1.0')
            version('thumbnailator', '0.4.20')
            version('xerces', '2.12.2')

            plugin('spring-boot', 'org.springframework.boot').versionRef('springBoot')
            // kotlin基础插件
            plugin('kotlin-jvm', 'org.jetbrains.kotlin.jvm').versionRef('kotlin')
            // spring插件 可以给 一些spring注解的类 添加 open关键字 解决kotlin 默认final问题
            plugin('kotlin-spring', 'org.jetbrains.kotlin.plugin.spring').versionRef('kotlin')
            // jpa插件 主要可以给JPA的一些注解类添加 无参构造函数
            plugin('kotlin-jpa', 'org.jetbrains.kotlin.plugin.jpa').versionRef('kotlin')
            plugin('kotlin-lombok', 'org.jetbrains.kotlin.plugin.lombok').versionRef('kotlin')

            library('asm', 'org.ow2.asm', 'asm').versionRef('asm')
            library('authorization-server', 'org.springframework.security', 'spring-security-oauth2-authorization-server').versionRef('authorizationServer')
            library('bizlog', 'io.github.mouzt', 'bizlog-sdk').versionRef('bizlog')
            library('captcha', 'com.lwohvye.captcha', 'captcha-spring-boot-starter').versionRef('captcha')
            library('commons-beanutils', 'commons-beanutils', 'commons-beanutils').versionRef('commonsBeanutils')
            library('commons-configuration', 'org.apache.commons', 'commons-configuration2').versionRef("commonsConfiguration")
            library('coroutines-core', 'org.jetbrains.kotlinx', 'kotlinx-coroutines-core').versionRef('kotlinxCoroutines')
            library('coroutines-jdk8', 'org.jetbrains.kotlinx', 'kotlinx-coroutines-jdk8').versionRef('kotlinxCoroutines')
            library('coroutines-jdk9', 'org.jetbrains.kotlinx', 'kotlinx-coroutines-jdk9').versionRef('kotlinxCoroutines')
            library('easy-captcha', 'com.github.whvcse', 'easy-captcha').versionRef('easyCaptcha')
            library('hutool', 'cn.hutool', 'hutool-all').versionRef('hutool')
            library('ip2region', 'net.dreamlu', 'mica-ip2region').versionRef('ip2region')
            library('jjwt-api', 'io.jsonwebtoken', 'jjwt-api').versionRef('jjwt')
            library('jjwt-impl', 'io.jsonwebtoken', 'jjwt-impl').versionRef('jjwt')
            library('jjwt-jackson', 'io.jsonwebtoken', 'jjwt-jackson').versionRef('jjwt')
            library('log4jdbc', 'com.lwohvye.log4jdbc-log4j2', 'log4jdbc-log4j2-jdbc4.1').versionRef('log4jdbc')
            library('logback-encoder', 'net.logstash.logback', 'logstash-logback-encoder').versionRef('logstash')
            library('mapstruct', 'org.mapstruct', 'mapstruct').versionRef('mapstruct')
            library('mapstruct-processor', 'org.mapstruct', 'mapstruct-processor').versionRef('mapstruct')
            library('mapstruct-spring', 'org.mapstruct.extensions.spring', 'mapstruct-spring-extensions').versionRef('mapstructSpring')
            library('mapstruct-spring-annotations', 'org.mapstruct.extensions.spring', 'mapstruct-spring-annotations').versionRef('mapstructSpring')
            library('oshi-core', 'com.github.oshi', 'oshi-core').versionRef('oshiCore')
            library('poi', 'org.apache.poi', 'poi').versionRef('poi')
            library('poi-ooxml', 'org.apache.poi', 'poi-ooxml').versionRef('poi')
            library('quartz', 'org.quartz-scheduler', 'quartz').versionRef('quartz')
            library('redisson', 'org.redisson', 'redisson-spring-boot-starter').versionRef('redisson')
            library('springdoc-webflux-ui', 'org.springdoc', 'springdoc-openapi-starter-webflux-ui').versionRef('springdoc')
            library('springdoc-webmvc-ui', 'org.springdoc', 'springdoc-openapi-starter-webmvc-ui').versionRef('springdoc')
            library('thumbnailator', 'net.coobird', 'thumbnailator').versionRef('thumbnailator')
            library('xerces', 'xerces', 'xercesImpl').versionRef('xerces')

            bundle('coroutines', ['coroutines-core', 'coroutines-jdk8', 'coroutines-jdk9'])
        }
    }
}

rootProject.name = 'valentine-p2p'

def buildFiles = fileTree(rootDir) {
    def excludes = gradle.startParameter.projectProperties.get("excludeProjects")?.split(",")
    include "**/*.gradle", "**/*.gradle.kts"
    exclude "build", "**/gradle", "settings.gradle", "buildSrc", "/build.gradle", ".*", "out"
    if ("$kotlinVersion".matches("^1\\.[0-8]\\.\\d{1,2}\$|^0\\.\\d+\\.\\d+\$")) // current version is not support Java 20, 1.9.0 Support Java 20
        exclude "**/*-kotlin.gradle"
    if (excludes) {
        exclude excludes
    }
}

buildFiles.forEach { buildFile ->
    def isDefaultName = buildFile.name == "build.gradle" || buildFile.name == "build.gradle.kts"
    def isKotlin = buildFile.name.endsWith ".kts"
    if (isDefaultName) {
        def buildFilePath = buildFile.parentFile.absolutePath
        def projectPath = buildFilePath.replace((String) rootDir.absolutePath, "").replace(File.separator, ":")
        include projectPath
    } else {
        def projectName
        if (isKotlin) {
            projectName = buildFile.name.replace(".gradle.kts", "")
        } else {
            projectName = buildFile.name.replace(".gradle", "")
        }


        def projectPath = ":$projectName"
        include projectPath

        def project = findProject(projectPath)
        project.name = projectName
        project.projectDir = buildFile.parentFile
        project.buildFileName = buildFile.name
    }
}

gradleEnterprise {
    def runsOnCI = providers.environmentVariable("CI").getOrElse("false").toBoolean()
    if (runsOnCI) {
        buildScan {
            publishAlways()
            termsOfServiceUrl = "https://gradle.com/terms-of-service"
            termsOfServiceAgree = "yes"
        }
    }
}
